import Foundation
import SwiftUI
import UIKit

// 【ChaoCode】 Swift 基礎篇：期末作業 😊
// 請確實閱讀完 Google 文件上的說明再開始進行，以下提供步驟引導，但你當然也可以完全自己寫。
// 除了 countCardsPoints() 以外沒有提供 checkHelper，所以寫完你會需要自己多 run 幾次檢查。

/// 莊家 / 玩家手上的所有牌。
/// - Parameter points: 手牌總計分數。
/// - Parameter cards: 照取得順序排列的牌。
/// - Warning: cards 類型是 [Int] 因為我沒有加入花色的資訊，因為不影響判斷結果，但你可以考慮包含進去，你會能印出更漂亮的結果。
typealias 手牌 = (points: Int, cards: [Int])

// 計算整個牌組的總點數。
func countCardsPoints(cards: [Int]) -> Int { cards.reduce(0) {
    print($0, min($1, 10))
    return $0 + min($1, 10)
}}

func cardPointTest(_ counter: ([Int]) -> Int) {
    let testCases: [(answer: Int, cards: [Int])] = [(28, [9, 4, 6, 2, 7]), (23, [8, 4, 1, 7, 3]), (31, [2, 8, 9, 2, 13]), (25, [2, 1, 11, 2, 13]), (22, [1, 7, 2, 3, 9]), (18, [1, 2, 13, 2, 3]), (29, [13, 2, 7, 12]), (19, [13, 2, 4, 3]), (25, [13, 2, 3, 12]), (21, [12, 3, 2, 6]), (16, [12, 2, 3, 1]), (25, [11, 6, 4, 5]), (29, [11, 6, 3, 12]), (21, [11, 5, 4, 2]), (23, [10, 4, 7, 2]), (21, [10, 2, 8, 1]), (24, [10, 2, 2, 12]), (23, [9, 7, 3, 4]), (19, [9, 4, 1, 5]), (24, [8, 7, 1, 8]), (24, [8, 4, 5, 7]), (24, [8, 2, 10, 4]), (28, [7, 7, 5, 9]), (27, [7, 2, 8, 12]), (27, [6, 9, 2, 12]), (22, [6, 5, 2, 9]), (20, [6, 4, 9, 1]), (22, [5, 13, 3, 4]), (23, [5, 11, 4, 4]), (24, [5, 10, 3, 6]), (26, [5, 10, 1, 11]), (27, [5, 8, 7, 7]), (15, [5, 6, 3, 1]), (21, [5, 1, 2, 3]), (25, [4, 12, 5, 6]), (24, [4, 7, 3, 13]), (19, [4, 6, 3, 6]), (24, [4, 4, 13, 6]), (19, [4, 2, 5, 8]), (20, [3, 13, 6, 1]), (21, [3, 7, 9, 2]), (26, [3, 3, 11, 11]), (25, [3, 2, 10, 12]), (17, [3, 2, 2, 11]), (16, [3, 1, 2, 11]), (27, [2, 12, 5, 10]), (24, [2, 8, 10, 4]), (20, [2, 5, 11, 3]), (15, [2, 2, 12, 1]), (23, [2, 1, 13, 10]), (23, [1, 12, 5, 7]), (20, [1, 4, 12, 5]), (17, [1, 4, 2, 10]), (24, [1, 3, 13, 12]), (14, [1, 2, 1, 12]), (22, [1, 1, 13, 10]), (30, [13, 12, 11]), (30, [13, 11, 11]), (22, [13, 11, 2]), (24, [13, 6, 8]), (20, [13, 4, 6]), (23, [13, 3, 10]), (17, [13, 3, 4]), (22, [13, 2, 12]), (30, [12, 13, 11]), (30, [12, 13, 10]), (30, [12, 11, 11]), (23, [12, 11, 3]), (30, [12, 10, 11]), (30, [12, 10, 10]), (21, [12, 10, 1]), (27, [12, 9, 8]), (27, [12, 8, 9]), (27, [12, 7, 10]), (26, [12, 7, 9]), (25, [12, 7, 8]), (26, [12, 6, 13]), (22, [12, 5, 7]), (25, [11, 13, 5]), (30, [11, 10, 11]), (29, [11, 10, 9]), (24, [11, 9, 5]), (21, [11, 4, 7]), (22, [11, 2, 13]), (28, [10, 11, 8]), (24, [10, 8, 6]), (22, [10, 6, 6]), (24, [10, 4, 13]), (22, [10, 4, 8]), (20, [10, 4, 6]), (28, [9, 13, 9]), (22, [9, 13, 3]), (22, [9, 12, 3]), (29, [9, 11, 10]), (29, [9, 10, 11]), (26, [9, 10, 7]), (21, [9, 10, 2]), (27, [9, 8, 10]), (22, [9, 5, 8]), (23, [9, 4, 11]), (23, [8, 13, 5]), (28, [8, 12, 11]), (24, [8, 10, 6]), (23, [8, 10, 5]), (21, [8, 5, 8]), (21, [8, 3, 11]), (16, [8, 1, 7]), (27, [7, 13, 10]), (22, [7, 8, 7]), (20, [7, 7, 6]), (21, [7, 5, 9]), (21, [7, 4, 11]), (26, [6, 13, 11]), (26, [6, 12, 11]), (26, [6, 10, 13]), (23, [6, 7, 13]), (20, [6, 6, 8]), (22, [5, 12, 7]), (25, [5, 11, 13]), (22, [5, 7, 11]), (21, [4, 11, 7]), (24, [4, 10, 10]), (18, [4, 10, 4]), (23, [4, 9, 10]), (20, [4, 7, 9]), (19, [4, 6, 9]), (12, [4, 6, 2]), (15, [4, 5, 6]), (23, [3, 11, 13]), (15, [3, 11, 2]), (18, [3, 10, 5]), (22, [3, 9, 10]), (16, [3, 9, 4]), (16, [3, 1, 2]), (22, [2, 13, 11]), (22, [2, 10, 11]), (17, [2, 10, 5]), (15, [2, 10, 3]), (17, [2, 4, 1]), (13, [2, 1, 13]), (12, [1, 1, 13]), (20, [13, 11]), (17, [13, 7]), (21, [13, 1]), (20, [12, 10]), (17, [12, 7]), (14, [12, 4]), (21, [12, 1]), (12, [11, 2]), (21, [11, 1]), (20, [10, 13]), (20, [10, 11]), (20, [10, 10]), (18, [10, 8]), (17, [10, 7]), (21, [10, 1]), (19, [9, 13]), (15, [9, 6]), (11, [9, 2]), (18, [8, 10]), (10, [8, 2]), (17, [7, 13]), (17, [7, 10]), (18, [7, 1]), (13, [6, 7]), (10, [6, 4]), (9, [6, 3]), (15, [5, 10]), (8, [5, 3]), (6, [4, 2]), (13, [3, 13]), (10, [3, 7]), (7, [3, 4]), (5, [3, 2]), (14, [3, 1]), (12, [2, 13]), (12, [2, 10]), (7, [2, 5]), (4, [2, 2]), (21, [1, 13]), (21, [1, 12]), (21, [1, 11]), (21, [1, 10]), (19, [1, 8]), (16, [1, 5]), (15, [1, 4]), (14, [1, 3]), (13, [1, 2]), (12, [1, 1]), (10, [13]), (10, [11]), (10, [10]), (9, [9]), (10, [12]), (4, [4]), (3, [3]), (2, [2]), (11, [1])]

    for testCase in testCases {
        let testAnswer = counter(testCase.cards)
        if testAnswer != testCase.answer {
            print("❌ 牌組 \(testCase.cards) 點數應為 \(testCase.answer)，但您的計算結果為 \(testAnswer)")
            return
        }
    }

    print("✅ 您的點數計算結果沒有問題")
}

cardPointTest(countCardsPoints)
func dealCard(to currentCards: 手牌 = (0, []), newCard: Int) -> 手牌 {
    // 發牌，也就是在現在的牌組中新增一張牌，回傳新的手牌。
}

func getCardsString(_ cards: 手牌) -> String {
    // 提供第一回合和最後結束時使用。手牌中的 1、11、12、13 應轉為 A、J、Q、K。
}

// 2️⃣ 遊戲開始：設定初始狀況。

// 為玩家和莊家發第一張牌並印出來。
// 💡 記得發牌中會出現的牌是有限制的（注意事項的第一點），你要想一個方法管理這個「發牌牌組」。

print("""
玩家第一張牌為 ？；\
莊家第一張牌為 ？)。
""")

// 3️⃣ 重複 google 文件上的流程 2 和 3 直到：玩家決定不補牌、有人超過 21 點、莊家拿了 5 張牌但沒有爆牌，或是有人「剛好」21 點。

// 💡 記得玩家停止補牌之後就不能再要牌、莊家點數少於 17 點的話一定得補牌，就算玩家停止要牌也得補滿牌。
// 💡 下面是我做這個 Loop 的時候有用到的變數和 print 給你參考。你不一定要用跟我一樣的。

var isPlayersTurn = true
var playerDidStop = false

print("＞ 玩家要補牌嗎？")
print("要")
print("玩家停止補牌。")
print("＞ 莊家補牌。")
print("＞ 莊家和玩家皆停止補牌。")
print("＞ 莊家不補牌。")

// 4️⃣ 印出勝負資訊

print("平手。")
print("👑 ？？？ 獲勝。")
print("👑 ？？？ 21 點獲勝。")
print("玩家爆牌，👑 莊家獲勝。")
print("莊家爆牌，👑 玩家獲勝。")
print("👑 莊家五張牌獲勝。")

// 5️⃣ 印出兩邊的最終點數和手牌

print("""
玩家 ？ 點，手牌為「ＯＯＯ」；
莊家 ？ 點，手牌為「ＯＯＯ」。
""")

// 6️⃣ 檢查
// ＊不應該有任何一方有超過 5 張牌的情況。
// ＊所有出現的牌之中，不應該有同一個數字出現兩次以上的情況。
// ＊你是否會有兩邊都爆牌或都 21 點的情況？如果有你是否有正確判斷順序？
// ＊玩家停止要牌後莊家是否有補到至少 17 點？
// ＊玩家結算時不應該有低於 11 點的情況，除非莊家五張牌獲勝。

// 7️⃣ 確定沒問題之後你可以把最上面的 typealias 和 function 都移動到 sources 裡面，你可以設定任何檔案名稱，記得前面全都要加上 public。這樣能讓你 playground 中的 code 更乾淨，只留下遊戲邏輯。
